{{range .integrations}}
<div class="integration-card" onclick="showIntegrationDetails('{{.ID}}')">
    <div class="integration-header">
        <div class="integration-icon {{.IntegrationType}}">
            {{if eq .IntegrationType "calendar"}}üìÖ
            {{else if eq .IntegrationType "storage"}}üíæ
            {{else if eq .IntegrationType "communication"}}üí¨
            {{else if eq .IntegrationType "smart_home"}}üè†
            {{else if eq .IntegrationType "automation"}}ü§ñ
            {{else if eq .IntegrationType "finance"}}üí∞
            {{else}}‚öôÔ∏è
            {{end}}
        </div>
        <div class="integration-info">
            <h3>{{.DisplayName}}</h3>
            <p class="provider">{{.Provider}}</p>
        </div>
    </div>

    <div class="integration-status">
        <span class="status-indicator {{.Status}}"></span>
        <span class="status-text">
            {{if eq .Status "connected"}}Connected
            {{else if eq .Status "disconnected"}}Disconnected
            {{else if eq .Status "error"}}Error
            {{else if eq .Status "pending"}}Pending Setup
            {{else if eq .Status "syncing"}}Syncing...
            {{else}}{{.Status}}
            {{end}}
        </span>
        {{if .LastSyncAt}}
            <span class="last-sync">‚Ä¢ Last sync: {{.LastSyncAt.Format "Jan 2, 3:04 PM"}}</span>
        {{end}}
    </div>

    {{if .Description}}
    <div class="integration-description">
        <p>{{.Description}}</p>
    </div>
    {{end}}

    <div class="integration-actions" onclick="event.stopPropagation()">
        {{if eq .Status "connected"}}
            <button class="btn btn-small btn-secondary"
                    hx-post="/api/v1/integrations/{{.ID}}/sync"
                    hx-target="closest .integration-card"
                    hx-swap="outerHTML">
                Sync Now
            </button>
            <button class="btn btn-small btn-secondary"
                    hx-post="/api/v1/integrations/{{.ID}}/test"
                    hx-target="closest .integration-card"
                    hx-swap="outerHTML">
                Test
            </button>
        {{else if eq .Status "pending"}}
            <button class="btn btn-small btn-primary" onclick="setupIntegration('{{.ID}}', '{{.Provider}}', '{{.AuthMethod}}')">
                Setup
            </button>
        {{else if eq .Status "error"}}
            <button class="btn btn-small btn-primary" onclick="setupIntegration('{{.ID}}', '{{.Provider}}', '{{.AuthMethod}}')">
                Reconnect
            </button>
        {{end}}

        <button class="btn btn-small btn-secondary" onclick="editIntegration('{{.ID}}')">
            Edit
        </button>

        <button class="btn btn-small btn-danger"
                hx-delete="/api/v1/integrations/{{.ID}}"
                hx-confirm="Are you sure you want to delete this integration?"
                hx-target="closest .integration-card"
                hx-swap="outerHTML">
            Delete
        </button>
    </div>
</div>
{{else}}
<div class="empty-state">
    <div class="empty-icon">üîå</div>
    <h3>No integrations yet</h3>
    <p>Connect external services to enhance your family management experience.</p>
    <button class="btn btn-primary" onclick="showAddIntegrationModal()">Add Your First Integration</button>
</div>
{{end}}

<style>
.integration-description {
    margin-bottom: 1rem;
}

.integration-description p {
    margin: 0;
    color: #6b7280;
    font-size: 0.875rem;
    line-height: 1.4;
}

.last-sync {
    color: #9ca3af;
    font-size: 0.75rem;
    margin-left: 0.5rem;
}

.empty-state {
    grid-column: 1 / -1;
    text-align: center;
    padding: 3rem 1rem;
    background: white;
    border: 2px dashed #e5e7eb;
    border-radius: 0.75rem;
}

.empty-icon {
    font-size: 3rem;
    margin-bottom: 1rem;
}

.empty-state h3 {
    margin: 0 0 0.5rem 0;
    color: #374151;
    font-size: 1.25rem;
}

.empty-state p {
    margin: 0 0 1.5rem 0;
    color: #6b7280;
    font-size: 1rem;
}
</style>

<script>
function showIntegrationDetails(integrationId) {
    fetch(`/api/v1/integrations/${integrationId}?include_credentials=true`)
        .then(response => response.json())
        .then(data => {
            document.getElementById('details-title').textContent = data.integration.display_name;

            let content = `
                <div class="details-grid">
                    <div class="detail-item">
                        <label>Provider:</label>
                        <span>${data.integration.provider}</span>
                    </div>
                    <div class="detail-item">
                        <label>Type:</label>
                        <span>${data.integration.integration_type}</span>
                    </div>
                    <div class="detail-item">
                        <label>Status:</label>
                        <span class="status-badge ${data.integration.status}">${data.integration.status}</span>
                    </div>
                    <div class="detail-item">
                        <label>Authentication:</label>
                        <span>${data.integration.auth_method}</span>
                    </div>
                    <div class="detail-item">
                        <label>Created:</label>
                        <span>${new Date(data.integration.created_at).toLocaleDateString()}</span>
                    </div>
                    ${data.integration.last_sync_at ? `
                    <div class="detail-item">
                        <label>Last Sync:</label>
                        <span>${new Date(data.integration.last_sync_at).toLocaleString()}</span>
                    </div>
                    ` : ''}
                </div>
            `;

            if (data.integration.description) {
                content += `
                    <div class="detail-section">
                        <h4>Description</h4>
                        <p>${data.integration.description}</p>
                    </div>
                `;
            }

            if (data.recent_sync_history && data.recent_sync_history.length > 0) {
                content += `
                    <div class="detail-section">
                        <h4>Recent Sync History</h4>
                        <div class="sync-history">
                `;

                data.recent_sync_history.forEach(sync => {
                    content += `
                        <div class="sync-item">
                            <span class="sync-status ${sync.status}">${sync.status}</span>
                            <span class="sync-type">${sync.sync_type}</span>
                            <span class="sync-time">${new Date(sync.started_at).toLocaleString()}</span>
                            ${sync.items_synced ? `<span class="sync-count">${sync.items_synced} items</span>` : ''}
                        </div>
                    `;
                });

                content += `
                        </div>
                    </div>
                `;
            }

            document.getElementById('details-content').innerHTML = content;
            document.getElementById('integration-details-modal').style.display = 'flex';
        })
        .catch(error => {
            console.error('Error fetching integration details:', error);
            alert('Failed to load integration details.');
        });
}

function setupIntegration(integrationId, provider, authMethod) {
    if (authMethod === 'oauth2') {
        // Redirect to OAuth flow
        window.location.href = `/oauth/${provider}/connect?integration_id=${integrationId}`;
    } else {
        // Show credentials input modal
        alert(`Setup for ${authMethod} not implemented yet. This would show a form to enter credentials.`);
    }
}

function editIntegration(integrationId) {
    alert('Edit integration not implemented yet. This would show a form to edit the integration settings.');
}
</script>

<style>
.details-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.detail-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.detail-item label {
    font-weight: 600;
    color: #374151;
    font-size: 0.875rem;
}

.detail-item span {
    color: #6b7280;
    font-size: 0.875rem;
}

.status-badge {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: capitalize;
}

.status-badge.connected {
    background: #dcfce7;
    color: #166534;
}

.status-badge.disconnected {
    background: #fef3c7;
    color: #92400e;
}

.status-badge.error {
    background: #fecaca;
    color: #991b1b;
}

.status-badge.pending {
    background: #f3f4f6;
    color: #374151;
}

.detail-section {
    margin-bottom: 1.5rem;
}

.detail-section h4 {
    margin: 0 0 0.75rem 0;
    color: #111827;
    font-size: 1rem;
}

.sync-history {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.sync-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem;
    background: #f9fafb;
    border-radius: 0.375rem;
    font-size: 0.75rem;
}

.sync-status {
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-weight: 500;
    text-transform: capitalize;
}

.sync-status.success {
    background: #dcfce7;
    color: #166534;
}

.sync-status.error {
    background: #fecaca;
    color: #991b1b;
}

.sync-status.partial {
    background: #fef3c7;
    color: #92400e;
}

.sync-type {
    color: #6b7280;
}

.sync-time {
    color: #9ca3af;
    margin-left: auto;
}

.sync-count {
    color: #6b7280;
    background: #e5e7eb;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
}
</style>